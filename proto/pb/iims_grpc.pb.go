// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: iims.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductService_InsertOne_FullMethodName      = "/uas.ProductService/InsertOne"
	ProductService_Get_FullMethodName            = "/uas.ProductService/Get"
	ProductService_Delete_FullMethodName         = "/uas.ProductService/Delete"
	ProductService_Update_FullMethodName         = "/uas.ProductService/Update"
	ProductService_BlockProduct_FullMethodName   = "/uas.ProductService/BlockProduct"
	ProductService_UnblockProduct_FullMethodName = "/uas.ProductService/UnblockProduct"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	InsertOne(ctx context.Context, in *InsertProductRequest, opts ...grpc.CallOption) (*InsertProductResponse, error)
	Get(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error)
	Delete(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlockProduct(ctx context.Context, in *BlockProductOperationMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnblockProduct(ctx context.Context, in *BlockProductOperationMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) InsertOne(ctx context.Context, in *InsertProductRequest, opts ...grpc.CallOption) (*InsertProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertProductResponse)
	err := c.cc.Invoke(ctx, ProductService_InsertOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Get(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductsResponse)
	err := c.cc.Invoke(ctx, ProductService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Delete(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Update(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) BlockProduct(ctx context.Context, in *BlockProductOperationMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_BlockProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UnblockProduct(ctx context.Context, in *BlockProductOperationMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductService_UnblockProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility.
type ProductServiceServer interface {
	InsertOne(context.Context, *InsertProductRequest) (*InsertProductResponse, error)
	Get(context.Context, *GetProductsRequest) (*GetProductsResponse, error)
	Delete(context.Context, *DeleteProductRequest) (*emptypb.Empty, error)
	Update(context.Context, *UpdateProductRequest) (*emptypb.Empty, error)
	BlockProduct(context.Context, *BlockProductOperationMessage) (*emptypb.Empty, error)
	UnblockProduct(context.Context, *BlockProductOperationMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServiceServer struct{}

func (UnimplementedProductServiceServer) InsertOne(context.Context, *InsertProductRequest) (*InsertProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOne not implemented")
}
func (UnimplementedProductServiceServer) Get(context.Context, *GetProductsRequest) (*GetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProductServiceServer) Delete(context.Context, *DeleteProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProductServiceServer) Update(context.Context, *UpdateProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductServiceServer) BlockProduct(context.Context, *BlockProductOperationMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockProduct not implemented")
}
func (UnimplementedProductServiceServer) UnblockProduct(context.Context, *BlockProductOperationMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockProduct not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}
func (UnimplementedProductServiceServer) testEmbeddedByValue()                        {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_InsertOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).InsertOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_InsertOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).InsertOne(ctx, req.(*InsertProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Get(ctx, req.(*GetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Delete(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Update(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_BlockProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockProductOperationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).BlockProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_BlockProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).BlockProduct(ctx, req.(*BlockProductOperationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UnblockProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockProductOperationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UnblockProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UnblockProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UnblockProduct(ctx, req.(*BlockProductOperationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uas.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertOne",
			Handler:    _ProductService_InsertOne_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProductService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProductService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductService_Update_Handler,
		},
		{
			MethodName: "BlockProduct",
			Handler:    _ProductService_BlockProduct_Handler,
		},
		{
			MethodName: "UnblockProduct",
			Handler:    _ProductService_UnblockProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iims.proto",
}

const (
	SaleService_InsertOne_FullMethodName   = "/uas.SaleService/InsertOne"
	SaleService_Get_FullMethodName         = "/uas.SaleService/Get"
	SaleService_Delete_FullMethodName      = "/uas.SaleService/Delete"
	SaleService_Update_FullMethodName      = "/uas.SaleService/Update"
	SaleService_BlockSale_FullMethodName   = "/uas.SaleService/BlockSale"
	SaleService_UnblockSale_FullMethodName = "/uas.SaleService/UnblockSale"
)

// SaleServiceClient is the client API for SaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleServiceClient interface {
	InsertOne(ctx context.Context, in *InsertSaleRequest, opts ...grpc.CallOption) (*InsertSaleResponse, error)
	Get(ctx context.Context, in *GetSalesRequest, opts ...grpc.CallOption) (*GetSalesResponse, error)
	Delete(ctx context.Context, in *DeleteSaleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *UpdateSaleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlockSale(ctx context.Context, in *BlockSaleOperationMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnblockSale(ctx context.Context, in *BlockSaleOperationMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type saleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleServiceClient(cc grpc.ClientConnInterface) SaleServiceClient {
	return &saleServiceClient{cc}
}

func (c *saleServiceClient) InsertOne(ctx context.Context, in *InsertSaleRequest, opts ...grpc.CallOption) (*InsertSaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertSaleResponse)
	err := c.cc.Invoke(ctx, SaleService_InsertOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Get(ctx context.Context, in *GetSalesRequest, opts ...grpc.CallOption) (*GetSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSalesResponse)
	err := c.cc.Invoke(ctx, SaleService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Delete(ctx context.Context, in *DeleteSaleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SaleService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) Update(ctx context.Context, in *UpdateSaleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SaleService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) BlockSale(ctx context.Context, in *BlockSaleOperationMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SaleService_BlockSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) UnblockSale(ctx context.Context, in *BlockSaleOperationMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SaleService_UnblockSale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleServiceServer is the server API for SaleService service.
// All implementations must embed UnimplementedSaleServiceServer
// for forward compatibility.
type SaleServiceServer interface {
	InsertOne(context.Context, *InsertSaleRequest) (*InsertSaleResponse, error)
	Get(context.Context, *GetSalesRequest) (*GetSalesResponse, error)
	Delete(context.Context, *DeleteSaleRequest) (*emptypb.Empty, error)
	Update(context.Context, *UpdateSaleRequest) (*emptypb.Empty, error)
	BlockSale(context.Context, *BlockSaleOperationMessage) (*emptypb.Empty, error)
	UnblockSale(context.Context, *BlockSaleOperationMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedSaleServiceServer()
}

// UnimplementedSaleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSaleServiceServer struct{}

func (UnimplementedSaleServiceServer) InsertOne(context.Context, *InsertSaleRequest) (*InsertSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOne not implemented")
}
func (UnimplementedSaleServiceServer) Get(context.Context, *GetSalesRequest) (*GetSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSaleServiceServer) Delete(context.Context, *DeleteSaleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSaleServiceServer) Update(context.Context, *UpdateSaleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSaleServiceServer) BlockSale(context.Context, *BlockSaleOperationMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockSale not implemented")
}
func (UnimplementedSaleServiceServer) UnblockSale(context.Context, *BlockSaleOperationMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockSale not implemented")
}
func (UnimplementedSaleServiceServer) mustEmbedUnimplementedSaleServiceServer() {}
func (UnimplementedSaleServiceServer) testEmbeddedByValue()                     {}

// UnsafeSaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleServiceServer will
// result in compilation errors.
type UnsafeSaleServiceServer interface {
	mustEmbedUnimplementedSaleServiceServer()
}

func RegisterSaleServiceServer(s grpc.ServiceRegistrar, srv SaleServiceServer) {
	// If the following call pancis, it indicates UnimplementedSaleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SaleService_ServiceDesc, srv)
}

func _SaleService_InsertOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).InsertOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_InsertOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).InsertOne(ctx, req.(*InsertSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Get(ctx, req.(*GetSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Delete(ctx, req.(*DeleteSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).Update(ctx, req.(*UpdateSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_BlockSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockSaleOperationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).BlockSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_BlockSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).BlockSale(ctx, req.(*BlockSaleOperationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_UnblockSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockSaleOperationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).UnblockSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SaleService_UnblockSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).UnblockSale(ctx, req.(*BlockSaleOperationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleService_ServiceDesc is the grpc.ServiceDesc for SaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uas.SaleService",
	HandlerType: (*SaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertOne",
			Handler:    _SaleService_InsertOne_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SaleService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SaleService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SaleService_Update_Handler,
		},
		{
			MethodName: "BlockSale",
			Handler:    _SaleService_BlockSale_Handler,
		},
		{
			MethodName: "UnblockSale",
			Handler:    _SaleService_UnblockSale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iims.proto",
}
